// Code generated by http://github.com/gojuno/minimock (v3.3.12). DO NOT EDIT.

package removecart_test

//go:generate minimock -i route256/cart/internal/cart/ports/vanilla/handlers/removecart.CartRemover -o cart_remover_mock_test.go -n CartRemoverMock -p removecart_test

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CartRemoverMock implements CartRemover
type CartRemoverMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcDeleteItemsByUserID          func(ctx context.Context, userID int64) (err error)
	inspectFuncDeleteItemsByUserID   func(ctx context.Context, userID int64)
	afterDeleteItemsByUserIDCounter  uint64
	beforeDeleteItemsByUserIDCounter uint64
	DeleteItemsByUserIDMock          mCartRemoverMockDeleteItemsByUserID
}

// NewCartRemoverMock returns a mock for CartRemover
func NewCartRemoverMock(t minimock.Tester) *CartRemoverMock {
	m := &CartRemoverMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeleteItemsByUserIDMock = mCartRemoverMockDeleteItemsByUserID{mock: m}
	m.DeleteItemsByUserIDMock.callArgs = []*CartRemoverMockDeleteItemsByUserIDParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCartRemoverMockDeleteItemsByUserID struct {
	optional           bool
	mock               *CartRemoverMock
	defaultExpectation *CartRemoverMockDeleteItemsByUserIDExpectation
	expectations       []*CartRemoverMockDeleteItemsByUserIDExpectation

	callArgs []*CartRemoverMockDeleteItemsByUserIDParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// CartRemoverMockDeleteItemsByUserIDExpectation specifies expectation struct of the CartRemover.DeleteItemsByUserID
type CartRemoverMockDeleteItemsByUserIDExpectation struct {
	mock      *CartRemoverMock
	params    *CartRemoverMockDeleteItemsByUserIDParams
	paramPtrs *CartRemoverMockDeleteItemsByUserIDParamPtrs
	results   *CartRemoverMockDeleteItemsByUserIDResults
	Counter   uint64
}

// CartRemoverMockDeleteItemsByUserIDParams contains parameters of the CartRemover.DeleteItemsByUserID
type CartRemoverMockDeleteItemsByUserIDParams struct {
	ctx    context.Context
	userID int64
}

// CartRemoverMockDeleteItemsByUserIDParamPtrs contains pointers to parameters of the CartRemover.DeleteItemsByUserID
type CartRemoverMockDeleteItemsByUserIDParamPtrs struct {
	ctx    *context.Context
	userID *int64
}

// CartRemoverMockDeleteItemsByUserIDResults contains results of the CartRemover.DeleteItemsByUserID
type CartRemoverMockDeleteItemsByUserIDResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteItemsByUserID *mCartRemoverMockDeleteItemsByUserID) Optional() *mCartRemoverMockDeleteItemsByUserID {
	mmDeleteItemsByUserID.optional = true
	return mmDeleteItemsByUserID
}

// Expect sets up expected params for CartRemover.DeleteItemsByUserID
func (mmDeleteItemsByUserID *mCartRemoverMockDeleteItemsByUserID) Expect(ctx context.Context, userID int64) *mCartRemoverMockDeleteItemsByUserID {
	if mmDeleteItemsByUserID.mock.funcDeleteItemsByUserID != nil {
		mmDeleteItemsByUserID.mock.t.Fatalf("CartRemoverMock.DeleteItemsByUserID mock is already set by Set")
	}

	if mmDeleteItemsByUserID.defaultExpectation == nil {
		mmDeleteItemsByUserID.defaultExpectation = &CartRemoverMockDeleteItemsByUserIDExpectation{}
	}

	if mmDeleteItemsByUserID.defaultExpectation.paramPtrs != nil {
		mmDeleteItemsByUserID.mock.t.Fatalf("CartRemoverMock.DeleteItemsByUserID mock is already set by ExpectParams functions")
	}

	mmDeleteItemsByUserID.defaultExpectation.params = &CartRemoverMockDeleteItemsByUserIDParams{ctx, userID}
	for _, e := range mmDeleteItemsByUserID.expectations {
		if minimock.Equal(e.params, mmDeleteItemsByUserID.defaultExpectation.params) {
			mmDeleteItemsByUserID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteItemsByUserID.defaultExpectation.params)
		}
	}

	return mmDeleteItemsByUserID
}

// ExpectCtxParam1 sets up expected param ctx for CartRemover.DeleteItemsByUserID
func (mmDeleteItemsByUserID *mCartRemoverMockDeleteItemsByUserID) ExpectCtxParam1(ctx context.Context) *mCartRemoverMockDeleteItemsByUserID {
	if mmDeleteItemsByUserID.mock.funcDeleteItemsByUserID != nil {
		mmDeleteItemsByUserID.mock.t.Fatalf("CartRemoverMock.DeleteItemsByUserID mock is already set by Set")
	}

	if mmDeleteItemsByUserID.defaultExpectation == nil {
		mmDeleteItemsByUserID.defaultExpectation = &CartRemoverMockDeleteItemsByUserIDExpectation{}
	}

	if mmDeleteItemsByUserID.defaultExpectation.params != nil {
		mmDeleteItemsByUserID.mock.t.Fatalf("CartRemoverMock.DeleteItemsByUserID mock is already set by Expect")
	}

	if mmDeleteItemsByUserID.defaultExpectation.paramPtrs == nil {
		mmDeleteItemsByUserID.defaultExpectation.paramPtrs = &CartRemoverMockDeleteItemsByUserIDParamPtrs{}
	}
	mmDeleteItemsByUserID.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDeleteItemsByUserID
}

// ExpectUserIDParam2 sets up expected param userID for CartRemover.DeleteItemsByUserID
func (mmDeleteItemsByUserID *mCartRemoverMockDeleteItemsByUserID) ExpectUserIDParam2(userID int64) *mCartRemoverMockDeleteItemsByUserID {
	if mmDeleteItemsByUserID.mock.funcDeleteItemsByUserID != nil {
		mmDeleteItemsByUserID.mock.t.Fatalf("CartRemoverMock.DeleteItemsByUserID mock is already set by Set")
	}

	if mmDeleteItemsByUserID.defaultExpectation == nil {
		mmDeleteItemsByUserID.defaultExpectation = &CartRemoverMockDeleteItemsByUserIDExpectation{}
	}

	if mmDeleteItemsByUserID.defaultExpectation.params != nil {
		mmDeleteItemsByUserID.mock.t.Fatalf("CartRemoverMock.DeleteItemsByUserID mock is already set by Expect")
	}

	if mmDeleteItemsByUserID.defaultExpectation.paramPtrs == nil {
		mmDeleteItemsByUserID.defaultExpectation.paramPtrs = &CartRemoverMockDeleteItemsByUserIDParamPtrs{}
	}
	mmDeleteItemsByUserID.defaultExpectation.paramPtrs.userID = &userID

	return mmDeleteItemsByUserID
}

// Inspect accepts an inspector function that has same arguments as the CartRemover.DeleteItemsByUserID
func (mmDeleteItemsByUserID *mCartRemoverMockDeleteItemsByUserID) Inspect(f func(ctx context.Context, userID int64)) *mCartRemoverMockDeleteItemsByUserID {
	if mmDeleteItemsByUserID.mock.inspectFuncDeleteItemsByUserID != nil {
		mmDeleteItemsByUserID.mock.t.Fatalf("Inspect function is already set for CartRemoverMock.DeleteItemsByUserID")
	}

	mmDeleteItemsByUserID.mock.inspectFuncDeleteItemsByUserID = f

	return mmDeleteItemsByUserID
}

// Return sets up results that will be returned by CartRemover.DeleteItemsByUserID
func (mmDeleteItemsByUserID *mCartRemoverMockDeleteItemsByUserID) Return(err error) *CartRemoverMock {
	if mmDeleteItemsByUserID.mock.funcDeleteItemsByUserID != nil {
		mmDeleteItemsByUserID.mock.t.Fatalf("CartRemoverMock.DeleteItemsByUserID mock is already set by Set")
	}

	if mmDeleteItemsByUserID.defaultExpectation == nil {
		mmDeleteItemsByUserID.defaultExpectation = &CartRemoverMockDeleteItemsByUserIDExpectation{mock: mmDeleteItemsByUserID.mock}
	}
	mmDeleteItemsByUserID.defaultExpectation.results = &CartRemoverMockDeleteItemsByUserIDResults{err}
	return mmDeleteItemsByUserID.mock
}

// Set uses given function f to mock the CartRemover.DeleteItemsByUserID method
func (mmDeleteItemsByUserID *mCartRemoverMockDeleteItemsByUserID) Set(f func(ctx context.Context, userID int64) (err error)) *CartRemoverMock {
	if mmDeleteItemsByUserID.defaultExpectation != nil {
		mmDeleteItemsByUserID.mock.t.Fatalf("Default expectation is already set for the CartRemover.DeleteItemsByUserID method")
	}

	if len(mmDeleteItemsByUserID.expectations) > 0 {
		mmDeleteItemsByUserID.mock.t.Fatalf("Some expectations are already set for the CartRemover.DeleteItemsByUserID method")
	}

	mmDeleteItemsByUserID.mock.funcDeleteItemsByUserID = f
	return mmDeleteItemsByUserID.mock
}

// When sets expectation for the CartRemover.DeleteItemsByUserID which will trigger the result defined by the following
// Then helper
func (mmDeleteItemsByUserID *mCartRemoverMockDeleteItemsByUserID) When(ctx context.Context, userID int64) *CartRemoverMockDeleteItemsByUserIDExpectation {
	if mmDeleteItemsByUserID.mock.funcDeleteItemsByUserID != nil {
		mmDeleteItemsByUserID.mock.t.Fatalf("CartRemoverMock.DeleteItemsByUserID mock is already set by Set")
	}

	expectation := &CartRemoverMockDeleteItemsByUserIDExpectation{
		mock:   mmDeleteItemsByUserID.mock,
		params: &CartRemoverMockDeleteItemsByUserIDParams{ctx, userID},
	}
	mmDeleteItemsByUserID.expectations = append(mmDeleteItemsByUserID.expectations, expectation)
	return expectation
}

// Then sets up CartRemover.DeleteItemsByUserID return parameters for the expectation previously defined by the When method
func (e *CartRemoverMockDeleteItemsByUserIDExpectation) Then(err error) *CartRemoverMock {
	e.results = &CartRemoverMockDeleteItemsByUserIDResults{err}
	return e.mock
}

// Times sets number of times CartRemover.DeleteItemsByUserID should be invoked
func (mmDeleteItemsByUserID *mCartRemoverMockDeleteItemsByUserID) Times(n uint64) *mCartRemoverMockDeleteItemsByUserID {
	if n == 0 {
		mmDeleteItemsByUserID.mock.t.Fatalf("Times of CartRemoverMock.DeleteItemsByUserID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteItemsByUserID.expectedInvocations, n)
	return mmDeleteItemsByUserID
}

func (mmDeleteItemsByUserID *mCartRemoverMockDeleteItemsByUserID) invocationsDone() bool {
	if len(mmDeleteItemsByUserID.expectations) == 0 && mmDeleteItemsByUserID.defaultExpectation == nil && mmDeleteItemsByUserID.mock.funcDeleteItemsByUserID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteItemsByUserID.mock.afterDeleteItemsByUserIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteItemsByUserID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteItemsByUserID implements CartRemover
func (mmDeleteItemsByUserID *CartRemoverMock) DeleteItemsByUserID(ctx context.Context, userID int64) (err error) {
	mm_atomic.AddUint64(&mmDeleteItemsByUserID.beforeDeleteItemsByUserIDCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteItemsByUserID.afterDeleteItemsByUserIDCounter, 1)

	if mmDeleteItemsByUserID.inspectFuncDeleteItemsByUserID != nil {
		mmDeleteItemsByUserID.inspectFuncDeleteItemsByUserID(ctx, userID)
	}

	mm_params := CartRemoverMockDeleteItemsByUserIDParams{ctx, userID}

	// Record call args
	mmDeleteItemsByUserID.DeleteItemsByUserIDMock.mutex.Lock()
	mmDeleteItemsByUserID.DeleteItemsByUserIDMock.callArgs = append(mmDeleteItemsByUserID.DeleteItemsByUserIDMock.callArgs, &mm_params)
	mmDeleteItemsByUserID.DeleteItemsByUserIDMock.mutex.Unlock()

	for _, e := range mmDeleteItemsByUserID.DeleteItemsByUserIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteItemsByUserID.DeleteItemsByUserIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteItemsByUserID.DeleteItemsByUserIDMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteItemsByUserID.DeleteItemsByUserIDMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteItemsByUserID.DeleteItemsByUserIDMock.defaultExpectation.paramPtrs

		mm_got := CartRemoverMockDeleteItemsByUserIDParams{ctx, userID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteItemsByUserID.t.Errorf("CartRemoverMock.DeleteItemsByUserID got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmDeleteItemsByUserID.t.Errorf("CartRemoverMock.DeleteItemsByUserID got unexpected parameter userID, want: %#v, got: %#v%s\n", *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteItemsByUserID.t.Errorf("CartRemoverMock.DeleteItemsByUserID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteItemsByUserID.DeleteItemsByUserIDMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteItemsByUserID.t.Fatal("No results are set for the CartRemoverMock.DeleteItemsByUserID")
		}
		return (*mm_results).err
	}
	if mmDeleteItemsByUserID.funcDeleteItemsByUserID != nil {
		return mmDeleteItemsByUserID.funcDeleteItemsByUserID(ctx, userID)
	}
	mmDeleteItemsByUserID.t.Fatalf("Unexpected call to CartRemoverMock.DeleteItemsByUserID. %v %v", ctx, userID)
	return
}

// DeleteItemsByUserIDAfterCounter returns a count of finished CartRemoverMock.DeleteItemsByUserID invocations
func (mmDeleteItemsByUserID *CartRemoverMock) DeleteItemsByUserIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteItemsByUserID.afterDeleteItemsByUserIDCounter)
}

// DeleteItemsByUserIDBeforeCounter returns a count of CartRemoverMock.DeleteItemsByUserID invocations
func (mmDeleteItemsByUserID *CartRemoverMock) DeleteItemsByUserIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteItemsByUserID.beforeDeleteItemsByUserIDCounter)
}

// Calls returns a list of arguments used in each call to CartRemoverMock.DeleteItemsByUserID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteItemsByUserID *mCartRemoverMockDeleteItemsByUserID) Calls() []*CartRemoverMockDeleteItemsByUserIDParams {
	mmDeleteItemsByUserID.mutex.RLock()

	argCopy := make([]*CartRemoverMockDeleteItemsByUserIDParams, len(mmDeleteItemsByUserID.callArgs))
	copy(argCopy, mmDeleteItemsByUserID.callArgs)

	mmDeleteItemsByUserID.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteItemsByUserIDDone returns true if the count of the DeleteItemsByUserID invocations corresponds
// the number of defined expectations
func (m *CartRemoverMock) MinimockDeleteItemsByUserIDDone() bool {
	if m.DeleteItemsByUserIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteItemsByUserIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteItemsByUserIDMock.invocationsDone()
}

// MinimockDeleteItemsByUserIDInspect logs each unmet expectation
func (m *CartRemoverMock) MinimockDeleteItemsByUserIDInspect() {
	for _, e := range m.DeleteItemsByUserIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartRemoverMock.DeleteItemsByUserID with params: %#v", *e.params)
		}
	}

	afterDeleteItemsByUserIDCounter := mm_atomic.LoadUint64(&m.afterDeleteItemsByUserIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteItemsByUserIDMock.defaultExpectation != nil && afterDeleteItemsByUserIDCounter < 1 {
		if m.DeleteItemsByUserIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CartRemoverMock.DeleteItemsByUserID")
		} else {
			m.t.Errorf("Expected call to CartRemoverMock.DeleteItemsByUserID with params: %#v", *m.DeleteItemsByUserIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteItemsByUserID != nil && afterDeleteItemsByUserIDCounter < 1 {
		m.t.Error("Expected call to CartRemoverMock.DeleteItemsByUserID")
	}

	if !m.DeleteItemsByUserIDMock.invocationsDone() && afterDeleteItemsByUserIDCounter > 0 {
		m.t.Errorf("Expected %d calls to CartRemoverMock.DeleteItemsByUserID but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteItemsByUserIDMock.expectedInvocations), afterDeleteItemsByUserIDCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CartRemoverMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockDeleteItemsByUserIDInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CartRemoverMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CartRemoverMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeleteItemsByUserIDDone()
}
