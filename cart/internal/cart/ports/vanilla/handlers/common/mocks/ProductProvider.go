// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "route256/cart/internal/cart/models"

	mock "github.com/stretchr/testify/mock"
)

// ProductProvider is an autogenerated mock type for the ProductProvider type
type ProductProvider struct {
	mock.Mock
}

// GetProduct provides a mock function with given fields: ctx, sku
func (_m *ProductProvider) GetProduct(ctx context.Context, sku int64) (models.ItemDescription, error) {
	ret := _m.Called(ctx, sku)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 models.ItemDescription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (models.ItemDescription, error)); ok {
		return rf(ctx, sku)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) models.ItemDescription); ok {
		r0 = rf(ctx, sku)
	} else {
		r0 = ret.Get(0).(models.ItemDescription)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, sku)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductProvider creates a new instance of ProductProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductProvider {
	mock := &ProductProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
