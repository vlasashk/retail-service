// Code generated by http://github.com/gojuno/minimock (v3.3.12). DO NOT EDIT.

package checkout_test

//go:generate minimock -i route256/cart/internal/cart/ports/vanilla/handlers/checkout.CartCheckout -o cart_checkout_mock_test.go -n CartCheckoutMock -p checkout_test

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CartCheckoutMock implements CartCheckout
type CartCheckoutMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCartCheckout          func(ctx context.Context, userID int64) (i1 int64, err error)
	inspectFuncCartCheckout   func(ctx context.Context, userID int64)
	afterCartCheckoutCounter  uint64
	beforeCartCheckoutCounter uint64
	CartCheckoutMock          mCartCheckoutMockCartCheckout
}

// NewCartCheckoutMock returns a mock for CartCheckout
func NewCartCheckoutMock(t minimock.Tester) *CartCheckoutMock {
	m := &CartCheckoutMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CartCheckoutMock = mCartCheckoutMockCartCheckout{mock: m}
	m.CartCheckoutMock.callArgs = []*CartCheckoutMockCartCheckoutParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCartCheckoutMockCartCheckout struct {
	optional           bool
	mock               *CartCheckoutMock
	defaultExpectation *CartCheckoutMockCartCheckoutExpectation
	expectations       []*CartCheckoutMockCartCheckoutExpectation

	callArgs []*CartCheckoutMockCartCheckoutParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// CartCheckoutMockCartCheckoutExpectation specifies expectation struct of the CartCheckout.CartCheckout
type CartCheckoutMockCartCheckoutExpectation struct {
	mock      *CartCheckoutMock
	params    *CartCheckoutMockCartCheckoutParams
	paramPtrs *CartCheckoutMockCartCheckoutParamPtrs
	results   *CartCheckoutMockCartCheckoutResults
	Counter   uint64
}

// CartCheckoutMockCartCheckoutParams contains parameters of the CartCheckout.CartCheckout
type CartCheckoutMockCartCheckoutParams struct {
	ctx    context.Context
	userID int64
}

// CartCheckoutMockCartCheckoutParamPtrs contains pointers to parameters of the CartCheckout.CartCheckout
type CartCheckoutMockCartCheckoutParamPtrs struct {
	ctx    *context.Context
	userID *int64
}

// CartCheckoutMockCartCheckoutResults contains results of the CartCheckout.CartCheckout
type CartCheckoutMockCartCheckoutResults struct {
	i1  int64
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCartCheckout *mCartCheckoutMockCartCheckout) Optional() *mCartCheckoutMockCartCheckout {
	mmCartCheckout.optional = true
	return mmCartCheckout
}

// Expect sets up expected params for CartCheckout.CartCheckout
func (mmCartCheckout *mCartCheckoutMockCartCheckout) Expect(ctx context.Context, userID int64) *mCartCheckoutMockCartCheckout {
	if mmCartCheckout.mock.funcCartCheckout != nil {
		mmCartCheckout.mock.t.Fatalf("CartCheckoutMock.CartCheckout mock is already set by Set")
	}

	if mmCartCheckout.defaultExpectation == nil {
		mmCartCheckout.defaultExpectation = &CartCheckoutMockCartCheckoutExpectation{}
	}

	if mmCartCheckout.defaultExpectation.paramPtrs != nil {
		mmCartCheckout.mock.t.Fatalf("CartCheckoutMock.CartCheckout mock is already set by ExpectParams functions")
	}

	mmCartCheckout.defaultExpectation.params = &CartCheckoutMockCartCheckoutParams{ctx, userID}
	for _, e := range mmCartCheckout.expectations {
		if minimock.Equal(e.params, mmCartCheckout.defaultExpectation.params) {
			mmCartCheckout.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCartCheckout.defaultExpectation.params)
		}
	}

	return mmCartCheckout
}

// ExpectCtxParam1 sets up expected param ctx for CartCheckout.CartCheckout
func (mmCartCheckout *mCartCheckoutMockCartCheckout) ExpectCtxParam1(ctx context.Context) *mCartCheckoutMockCartCheckout {
	if mmCartCheckout.mock.funcCartCheckout != nil {
		mmCartCheckout.mock.t.Fatalf("CartCheckoutMock.CartCheckout mock is already set by Set")
	}

	if mmCartCheckout.defaultExpectation == nil {
		mmCartCheckout.defaultExpectation = &CartCheckoutMockCartCheckoutExpectation{}
	}

	if mmCartCheckout.defaultExpectation.params != nil {
		mmCartCheckout.mock.t.Fatalf("CartCheckoutMock.CartCheckout mock is already set by Expect")
	}

	if mmCartCheckout.defaultExpectation.paramPtrs == nil {
		mmCartCheckout.defaultExpectation.paramPtrs = &CartCheckoutMockCartCheckoutParamPtrs{}
	}
	mmCartCheckout.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCartCheckout
}

// ExpectUserIDParam2 sets up expected param userID for CartCheckout.CartCheckout
func (mmCartCheckout *mCartCheckoutMockCartCheckout) ExpectUserIDParam2(userID int64) *mCartCheckoutMockCartCheckout {
	if mmCartCheckout.mock.funcCartCheckout != nil {
		mmCartCheckout.mock.t.Fatalf("CartCheckoutMock.CartCheckout mock is already set by Set")
	}

	if mmCartCheckout.defaultExpectation == nil {
		mmCartCheckout.defaultExpectation = &CartCheckoutMockCartCheckoutExpectation{}
	}

	if mmCartCheckout.defaultExpectation.params != nil {
		mmCartCheckout.mock.t.Fatalf("CartCheckoutMock.CartCheckout mock is already set by Expect")
	}

	if mmCartCheckout.defaultExpectation.paramPtrs == nil {
		mmCartCheckout.defaultExpectation.paramPtrs = &CartCheckoutMockCartCheckoutParamPtrs{}
	}
	mmCartCheckout.defaultExpectation.paramPtrs.userID = &userID

	return mmCartCheckout
}

// Inspect accepts an inspector function that has same arguments as the CartCheckout.CartCheckout
func (mmCartCheckout *mCartCheckoutMockCartCheckout) Inspect(f func(ctx context.Context, userID int64)) *mCartCheckoutMockCartCheckout {
	if mmCartCheckout.mock.inspectFuncCartCheckout != nil {
		mmCartCheckout.mock.t.Fatalf("Inspect function is already set for CartCheckoutMock.CartCheckout")
	}

	mmCartCheckout.mock.inspectFuncCartCheckout = f

	return mmCartCheckout
}

// Return sets up results that will be returned by CartCheckout.CartCheckout
func (mmCartCheckout *mCartCheckoutMockCartCheckout) Return(i1 int64, err error) *CartCheckoutMock {
	if mmCartCheckout.mock.funcCartCheckout != nil {
		mmCartCheckout.mock.t.Fatalf("CartCheckoutMock.CartCheckout mock is already set by Set")
	}

	if mmCartCheckout.defaultExpectation == nil {
		mmCartCheckout.defaultExpectation = &CartCheckoutMockCartCheckoutExpectation{mock: mmCartCheckout.mock}
	}
	mmCartCheckout.defaultExpectation.results = &CartCheckoutMockCartCheckoutResults{i1, err}
	return mmCartCheckout.mock
}

// Set uses given function f to mock the CartCheckout.CartCheckout method
func (mmCartCheckout *mCartCheckoutMockCartCheckout) Set(f func(ctx context.Context, userID int64) (i1 int64, err error)) *CartCheckoutMock {
	if mmCartCheckout.defaultExpectation != nil {
		mmCartCheckout.mock.t.Fatalf("Default expectation is already set for the CartCheckout.CartCheckout method")
	}

	if len(mmCartCheckout.expectations) > 0 {
		mmCartCheckout.mock.t.Fatalf("Some expectations are already set for the CartCheckout.CartCheckout method")
	}

	mmCartCheckout.mock.funcCartCheckout = f
	return mmCartCheckout.mock
}

// When sets expectation for the CartCheckout.CartCheckout which will trigger the result defined by the following
// Then helper
func (mmCartCheckout *mCartCheckoutMockCartCheckout) When(ctx context.Context, userID int64) *CartCheckoutMockCartCheckoutExpectation {
	if mmCartCheckout.mock.funcCartCheckout != nil {
		mmCartCheckout.mock.t.Fatalf("CartCheckoutMock.CartCheckout mock is already set by Set")
	}

	expectation := &CartCheckoutMockCartCheckoutExpectation{
		mock:   mmCartCheckout.mock,
		params: &CartCheckoutMockCartCheckoutParams{ctx, userID},
	}
	mmCartCheckout.expectations = append(mmCartCheckout.expectations, expectation)
	return expectation
}

// Then sets up CartCheckout.CartCheckout return parameters for the expectation previously defined by the When method
func (e *CartCheckoutMockCartCheckoutExpectation) Then(i1 int64, err error) *CartCheckoutMock {
	e.results = &CartCheckoutMockCartCheckoutResults{i1, err}
	return e.mock
}

// Times sets number of times CartCheckout.CartCheckout should be invoked
func (mmCartCheckout *mCartCheckoutMockCartCheckout) Times(n uint64) *mCartCheckoutMockCartCheckout {
	if n == 0 {
		mmCartCheckout.mock.t.Fatalf("Times of CartCheckoutMock.CartCheckout mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCartCheckout.expectedInvocations, n)
	return mmCartCheckout
}

func (mmCartCheckout *mCartCheckoutMockCartCheckout) invocationsDone() bool {
	if len(mmCartCheckout.expectations) == 0 && mmCartCheckout.defaultExpectation == nil && mmCartCheckout.mock.funcCartCheckout == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCartCheckout.mock.afterCartCheckoutCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCartCheckout.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CartCheckout implements CartCheckout
func (mmCartCheckout *CartCheckoutMock) CartCheckout(ctx context.Context, userID int64) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCartCheckout.beforeCartCheckoutCounter, 1)
	defer mm_atomic.AddUint64(&mmCartCheckout.afterCartCheckoutCounter, 1)

	if mmCartCheckout.inspectFuncCartCheckout != nil {
		mmCartCheckout.inspectFuncCartCheckout(ctx, userID)
	}

	mm_params := CartCheckoutMockCartCheckoutParams{ctx, userID}

	// Record call args
	mmCartCheckout.CartCheckoutMock.mutex.Lock()
	mmCartCheckout.CartCheckoutMock.callArgs = append(mmCartCheckout.CartCheckoutMock.callArgs, &mm_params)
	mmCartCheckout.CartCheckoutMock.mutex.Unlock()

	for _, e := range mmCartCheckout.CartCheckoutMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCartCheckout.CartCheckoutMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCartCheckout.CartCheckoutMock.defaultExpectation.Counter, 1)
		mm_want := mmCartCheckout.CartCheckoutMock.defaultExpectation.params
		mm_want_ptrs := mmCartCheckout.CartCheckoutMock.defaultExpectation.paramPtrs

		mm_got := CartCheckoutMockCartCheckoutParams{ctx, userID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCartCheckout.t.Errorf("CartCheckoutMock.CartCheckout got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmCartCheckout.t.Errorf("CartCheckoutMock.CartCheckout got unexpected parameter userID, want: %#v, got: %#v%s\n", *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCartCheckout.t.Errorf("CartCheckoutMock.CartCheckout got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCartCheckout.CartCheckoutMock.defaultExpectation.results
		if mm_results == nil {
			mmCartCheckout.t.Fatal("No results are set for the CartCheckoutMock.CartCheckout")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCartCheckout.funcCartCheckout != nil {
		return mmCartCheckout.funcCartCheckout(ctx, userID)
	}
	mmCartCheckout.t.Fatalf("Unexpected call to CartCheckoutMock.CartCheckout. %v %v", ctx, userID)
	return
}

// CartCheckoutAfterCounter returns a count of finished CartCheckoutMock.CartCheckout invocations
func (mmCartCheckout *CartCheckoutMock) CartCheckoutAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCartCheckout.afterCartCheckoutCounter)
}

// CartCheckoutBeforeCounter returns a count of CartCheckoutMock.CartCheckout invocations
func (mmCartCheckout *CartCheckoutMock) CartCheckoutBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCartCheckout.beforeCartCheckoutCounter)
}

// Calls returns a list of arguments used in each call to CartCheckoutMock.CartCheckout.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCartCheckout *mCartCheckoutMockCartCheckout) Calls() []*CartCheckoutMockCartCheckoutParams {
	mmCartCheckout.mutex.RLock()

	argCopy := make([]*CartCheckoutMockCartCheckoutParams, len(mmCartCheckout.callArgs))
	copy(argCopy, mmCartCheckout.callArgs)

	mmCartCheckout.mutex.RUnlock()

	return argCopy
}

// MinimockCartCheckoutDone returns true if the count of the CartCheckout invocations corresponds
// the number of defined expectations
func (m *CartCheckoutMock) MinimockCartCheckoutDone() bool {
	if m.CartCheckoutMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CartCheckoutMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CartCheckoutMock.invocationsDone()
}

// MinimockCartCheckoutInspect logs each unmet expectation
func (m *CartCheckoutMock) MinimockCartCheckoutInspect() {
	for _, e := range m.CartCheckoutMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartCheckoutMock.CartCheckout with params: %#v", *e.params)
		}
	}

	afterCartCheckoutCounter := mm_atomic.LoadUint64(&m.afterCartCheckoutCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CartCheckoutMock.defaultExpectation != nil && afterCartCheckoutCounter < 1 {
		if m.CartCheckoutMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CartCheckoutMock.CartCheckout")
		} else {
			m.t.Errorf("Expected call to CartCheckoutMock.CartCheckout with params: %#v", *m.CartCheckoutMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCartCheckout != nil && afterCartCheckoutCounter < 1 {
		m.t.Error("Expected call to CartCheckoutMock.CartCheckout")
	}

	if !m.CartCheckoutMock.invocationsDone() && afterCartCheckoutCounter > 0 {
		m.t.Errorf("Expected %d calls to CartCheckoutMock.CartCheckout but found %d calls",
			mm_atomic.LoadUint64(&m.CartCheckoutMock.expectedInvocations), afterCartCheckoutCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CartCheckoutMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCartCheckoutInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CartCheckoutMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CartCheckoutMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCartCheckoutDone()
}
