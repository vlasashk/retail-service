services:
  cart:
    container_name: cart
    build:
      context: .
      dockerfile: ./cart/cmd/cart/Dockerfile
    depends_on:
      loms:
        condition: service_healthy
      jaeger:
        condition: service_started
    env_file:
      - ./cart/config/docker.env
    ports:
      - "8082:8082"
    restart: always
    healthcheck:
      test: [ "CMD", "wget", "--spider", "--quiet", "cart:8082/healthz" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      start_interval: 3s
    networks:
      - backend
  loms:
    container_name: loms
    build:
      context: .
      dockerfile: ./loms/cmd/loms/Dockerfile
    depends_on:
      pg_master:
        condition: service_healthy
      pg_slave:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
      jaeger:
        condition: service_started
    env_file:
      - ./loms/config/docker.env
    environment:
      - ORDERS_DB_PASSWORD=${PG_PASS}
      - STOCKS_DB_PASSWORD=${PG_PASS}
    ports:
      - "50000:50000" #gRPC service
      - "8888:8888" #gRPC gateway
    restart: always
    healthcheck:
      test: ["CMD", "/bin/grpc_health_probe", "-addr=:50000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      start_interval: 3s
    networks:
      - backend
  
  pg_master:
    container_name: pg_master
    image: bitnami/postgresql:latest
    restart: always
    environment:
      - POSTGRESQL_USERNAME=${PG_USER}
      - POSTGRESQL_PASSWORD=${PG_PASS}
      - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
      - POSTGRESQL_LOG_HOSTNAME=true
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_user
      - POSTGRESQL_SYNCHRONOUS_COMMIT=on
      - POSTGRESQL_SYNCHRONOUS_STANDBY_NAMES=pg_slave
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
      start_interval: 3s
    volumes:
      - loms_master_data:/var/lib/postgresql/loms_data
    networks:
      - backend
  
  pg_slave:
    container_name: pg_slave
    image: bitnami/postgresql:latest
    depends_on:
      pg_master:
        condition: service_healthy
    restart: always
    environment:
      - POSTGRESQL_USERNAME=${PG_USER}
      - POSTGRESQL_PASSWORD=${PG_PASS}
      - POSTGRESQL_PGAUDIT_LOG=READ
      - POSTGRESQL_LOG_HOSTNAME=true
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_user
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - POSTGRESQL_MASTER_HOST=pg_master
      - POSTGRESQL_STANDBY_MODE=synchronous
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
      start_interval: 3s
    volumes:
      - loms_slave_data:/var/lib/postgresql/loms_data
    networks:
      - backend
        
  migration:
    container_name: migration
    image: alpine/curl:latest
    depends_on:
      pg_master:
        condition: service_healthy
      pg_slave:
        condition: service_healthy
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASS}
      - POSTGRES_DB=${PG_DB}
      - POSTGRES_HOST=${PG_HOST}
    volumes:
      - ./loms/migrations:/migrations
    entrypoint:
      - /bin/sh
      - -c
      - |
        curl -fsSL https://raw.githubusercontent.com/pressly/goose/master/install.sh | sh && 
        goose -dir=/migrations postgres "postgres://$${POSTGRES_USER}:$${POSTGRES_PASSWORD}@$${POSTGRES_HOST}/$${POSTGRES_DB}?sslmode=disable" up
    networks:
      - backend        
  
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    expose:
      - 9090
    volumes:
      - "./prometheus:/etc/prometheus"
    networks:
      - backend
  
  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    links:
      - prometheus:prometheus
    ports:
      - 3000:3000
    networks:
      - backend

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:1.56
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "5775:5775/udp" # agent accept zipkin.thrift over compact thrift protocol (deprecated, used by legacy clients only)
      - "6831:6831/udp" # agent accept jaeger.thrift over compact thrift protocol
      - "6832:6832/udp" # agent accept jaeger.thrift over binary thrift protocol
      - "5778:5778" # agent serve configs
      - "16686:16686" # query serve frontend (Jaeger UI)
      - "14268:14268" # collector accept jaeger.thrift directly from clients
      - "14250:14250" # collector accept model.proto
      - "9411:9411" # collector Zipkin compatible endpoint (optional)
      - "4317:4317" # OTLP collector grpc
      - "4318:4318" # OTLP collector http
    expose:
      - "4318"
    networks:
      - backend

volumes:
  loms_master_data:
  loms_slave_data:
    
networks:
  backend:
    driver: bridge
