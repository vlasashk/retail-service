services:
  cart:
    container_name: cart
    build:
      context: .
      dockerfile: ./cart/cmd/cart/Dockerfile
    depends_on:
      loms:
        condition: service_healthy
    env_file:
      - ./cart/config/docker.env
    ports:
      - "8082:8082"
    restart: always
    healthcheck:
      test: [ "CMD", "wget", "--spider", "--quiet", "cart:8082/healthz" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      start_interval: 3s
    networks:
      - backend
  loms:
    container_name: loms
    build:
      context: .
      dockerfile: ./loms/cmd/loms/Dockerfile
    depends_on:
      loms_db:
        condition: service_healthy
      loms_migration:
        condition: service_completed_successfully
    env_file:
      - ./loms/config/docker.env
    environment:
      - ORDERS_DB_PASSWORD=${PG_PASS}
      - STOCKS_DB_PASSWORD=${PG_PASS}
    ports:
      - "50000:50000" #gRPC service
      - "8888:8888" #gRPC gateway
    restart: always
    healthcheck:
      test: ["CMD", "/bin/grpc_health_probe", "-addr=:50000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      start_interval: 3s
    networks:
      - backend
  
  loms_db:
    container_name: loms_db
    image: postgres:latest
    user: postgres
    restart: always
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASS}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
      start_interval: 3s
    volumes:
      - loms_data:/var/lib/postgresql/loms_data
    networks:
      - backend
        
  loms_migration:
    container_name: loms_migration
    image: alpine/curl:latest
    depends_on:
      loms_db:
        condition: service_healthy
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASS}
      - POSTGRES_DB=${PG_DB}
      - POSTGRES_HOST=${PG_HOST}
    volumes:
      - ./loms/migrations:/migrations
    entrypoint:
      - /bin/sh
      - -c
      - |
        curl -fsSL https://raw.githubusercontent.com/pressly/goose/master/install.sh | sh && 
        goose -dir=/migrations postgres "postgres://$${POSTGRES_USER}:$${POSTGRES_PASSWORD}@$${POSTGRES_HOST}/$${POSTGRES_DB}?sslmode=disable" up
    networks:
      - backend        
        
volumes:
  loms_data:
    
networks:
  backend:
    driver: bridge
